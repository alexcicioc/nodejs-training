swagger: "2.0"
info:
  version: "0.0.1"
  title: Social image gallery
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /api
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
  
securityDefinitions:
  UserAuthentication:
      type: apiKey
      in: header
      name: X-Access-Token
  AdminAuthentication:
      type: apiKey
      in: header
      name: X-Access-Token
      
tags:
  - name: users
  - name: reports
  - name: images
  - name: comments
     
paths:


  # Reports controller
  /test:
      x-swagger-router-controller: reports
      get:
            
            operationId: test
            description: Get the number of users by age 
            responses:
              "200":
                description: Success
                schema:
                  type: object
                
              default:
                description: Error
                schema:
                  type: object
                

  # Reports controller
  /users/ages/count:
      x-swagger-router-controller: reports
      get:
            security:
            - AdminAuthentication: []
            tags:
            - reports
            operationId: getNumberOfUsersByAge
            description: Get the number of users by age 
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/UserAgesCountResponse"
              "401":
                description: Unauthorized
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
  /users/friends/average:
      x-swagger-router-controller: reports
      get:
            security:
            - AdminAuthentication: []
            tags:
            - reports
            operationId: getAverageNumberOfFriends
            description: Get an average of number of friends per user  
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/AverageNumberOfFriendsResponse"
              "401":
                description: Unauthorized
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
  /users/towns/count:
      x-swagger-router-controller: reports
      get:
            security:
            - AdminAuthentication: []
            tags:
            - reports
            operationId: getUsersPerTown
            description: Get a report of the number of users in each town   
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/UsersPerTownResponse"
              "401":
                description: Unauthorized
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
  # Users controller                
  /users:
      x-swagger-router-controller: users2
      get:
            security:
            - UserAuthentication: []
            tags:
            - users
            operationId: getUsers
            description: get a list of users
            # user info to be stored
            parameters:
              - in: query
                name: pageNo
                type: integer
                default: 1
                description: Page number
              
              - in: query
                name: itemsOnPage
                type: integer
                default: 20
                description: Page number
              
              - in: query
                name: searchText
                type: string
                description: Search text to filter the results
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/SearchUserResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
      post:
            tags:
            - users
            operationId: createUser
            description: create a new user
            # user info to be stored
            parameters:
              - name: CreateUserObject
                description: Object containing all the information required to create a new user
                in: body
                required: true
                schema:
                  $ref: "#/definitions/UserCreateObject"
            responses:
              "201":
                description: Success
                schema:
                  $ref: "#/definitions/UserCreateResponseObject"
              "409":
                description: Username already taken
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
      put:
            security:
            - UserAuthentication: []
            tags:
            - users
            operationId: updateUser
            description: create a new user
            # user info to be stored
            parameters:
              - name: body
                in: body
                required: true
                schema:
                  $ref: "#/definitions/UserInfoObject"
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
      delete:
            security:
            - AdminAuthentication: []
            tags:
            - users
            operationId: deleteUser
            description: delete an user, only an admin can perform this action
            parameters:
              - name: body
                in: body
                required: true
                schema:
                  $ref: "#/definitions/UserDeleteRequest"
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
              "404":
                description: User does not exist
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
  /users/authenticate:
      x-swagger-router-controller: users2
      post:
            description: login an generate a token
            operationId: authenticate
            tags:
            - users
            parameters:
            - in: body
              name: body
              description: Login information
              schema:
                type: object
                required:
                  - username
                  - password
                properties:
                  username:
                    type: string
                  password:
                    type: string
            responses:
              "200":
                description: Success
                schema:
                  type: object
                  required:
                    - authToken
                    - userId
                  properties:
                    authToken:
                      type: string
                    userId:
                      type: string
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
  /users/friends:
      x-swagger-router-controller: users2
      delete:
            description: search for users
            operationId: deleteFriend
            security:
            - UserAuthentication: []
            parameters:
            - in: body
              name: body
              schema:
                type: object
                required:
                  - username
                properties:
                  username:
                    type: string
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
              "404":
                description: Friend not found
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
      post:
            description: search for users
            operationId: addFriend
            security:
            - UserAuthentication: []
            parameters:
            - in: body
              name: body
              schema:
                type: object
                required:
                  - username
                properties:
                  username:
                    type: string
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
              "404":
                description: Username not found
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
  # Comments controller                
  /comments:
      # our controller name
      x-swagger-router-controller: comments
      put:
            operationId: editComment
            security:
            - UserAuthentication: []
            description: Edit a comment
            consumes:
              - application/json
            parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    imageId:
                      type: string
                    commentId:
                      type: string
                    text:
                      type: string
                  required:
                    - imageId
                    - commentId
                    - text
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
       
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"    
      delete:
            operationId: deleteComment
            security:
            - UserAuthentication: []
            description: Delete a comment
            # user info to be stored
            consumes:
              - application/json
            parameters:
              - name: body
                in: body
                required: true
                schema:
                  type: object
                  properties:
                    imageId:
                      type: string
                    commentId:
                      type: string
                  required:
                    - imageId
                    - commentId
            responses:
              "200":
                description: Success
                schema:
                  $ref: "#/definitions/GeneralResponse"
       
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"    
      post:
            operationId: postComment
            security:
            - UserAuthentication: []
            description: Post a comment on a picture
            # user info to be stored
            consumes:
              - application/json
            parameters:
              - name: body
                description: Object containing all the information required to comment on an image
                in: body
                required: true
                schema:
                  $ref: "#/definitions/PostCommentObject"
            responses:
              "200":
                description: Success
                schema:
                  type: object
                  properties:
                    commentId:
                      type: string
       
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
  # Images Controller                
  /users/images:
      x-swagger-router-controller: images2
      post:
            operationId: uploadImage
            security:
            - UserAuthentication: []
            tags:
            - images
            description: upload an image
            # user info to be stored
            consumes:
              - multipart/form-data
            parameters:
              - in: formData
                name: imageFile
                type: file
                description: The file to upload.
                required: true
                
              - in: formData
                name: title
                type: string
                description: Title of the image
                required: true
                
              - in: formData
                name: keywords
                type: string
                description: Keywords of the image, separated by comma
            responses:
              "200":
                description: Success
                schema:
                  type: object
                  properties:
                    url:
                      type: string
                    image:
                      $ref: "#/definitions/ImageObject"
              "415":
                description: Unsupported media type
                schema:
                  $ref: "#/definitions/ErrorResponse"    
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
    
  /users/{userId}/images:
      # our controller name
      x-swagger-router-controller: images2
      get:
            security:
            - UserAuthentication: []
            tags:
            - images
            description: get all user's images
            operationId: getImagesByUser
            # user info to be stored
            parameters:
              - name: userId
                type: string
                in: path
                required: true
            responses:
              "200":
                description: Success
                schema:
                  type: object
                  properties:
                    images:
                      type: array
                      items:
                        $ref: "#/definitions/ImageObject"
              "404":
                description: User not found
                schema:
                  $ref: "#/definitions/ErrorResponse"
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
                  
  /users/{userId}/profilePicture:
      x-swagger-router-controller: images2
      post:
            operationId: setProfilePicture
            security:
            - UserAuthentication: []
            description: Set an image as a profile picture
            # user info to be stored
            consumes:
              - application/json
            parameters:
            - name: userId
              type: string
              in: path
              required: true
            - in: body
              name: body
              description: The image id to set as profile picture
              schema:
                type: object
                required:
                  - imageId
                properties:
                  imageId:
                    type: string
            responses:
              "200":
                description: Success
                schema:
                  type: object
                  properties:
                    url:
                      type: string
                    image:
                      $ref: "#/definitions/GeneralResponse"
                  
              default:
                description: Error
                schema:
                  $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  ErrorResponse:
    required:
      - description
      - success
    properties:
      description:
        type: string
      success:
        type: boolean
        
  UserCreateObject:
    type: object
    properties:
      info:
        $ref: "#/definitions/UserInfoObject"
      username:
        type: string
        description: login username
      password:
        type: string
        description: login password
    required:
      - username
      - password
      - info
      
  UserInfoObject:
    type: object
    properties:
      name:
        type: string
        description: user's full name
      age:
        type: integer
        description: user's age
      gender:
        type: string
        description: user's gender
      town:
        type: string
        description: user's town
        default: Unknown
      
  SearchUserResponse:
      required:
        - users
      properties:
        # The array of users
        users:
          type: array
          items:
            $ref: "#/definitions/UserObject"
            
  UserObject:
    type: object
    properties:
      userId:
        type: string
        description: user's identifier
      info:
        type: object
        properties:
          age:
            type: number
            description: user age
          gender:
            type: string
            description: user age
          town:
            type: string
            description: user age
          name:
            type: string
            description: user age
    required:
      - userId
      - info
      
  UserCreateResponseObject:
    type: object
    properties:
      id:
        type: string
        description: user's unique identifier
      createDate:
        type: string
        format: date-time
        description: user's create date
    required:
      - id
      - createDate
      
  ImageObject:
    type: object
    properties:
      _id:
        type: string
        description: user's unique identifier
      title:
        type: string
        description: user's create date
      imagePath:
        type: string
        description: internal path
      createdBy:
        type: string
        description: username of the uploader
      create_date:
        type: string
        format: date_time
        description: date time of the upload
      keywords:
        type: array
        description: array of keywords
        items:
          type: string
      comments:
        type: array
        description: array of comments
        items:
          type: object
    required:
      - _id
      - create_date
      - title
      - imagePath
      - createdBy
      
  PostCommentObject:
    type: object
    properties:
      imageId:
        type: string
        description: unique identifier of the image
      text:
        type: string
        description: the text of the comment
    required:
      - imageId
      - text
  
  UsersPerTownResponse:
        type: object
        required:
          - towns
        properties:
          towns:
            type: array
            items:
              type: object
              properties:
                townName:
                  type: string
                  description: name of the town
                numberOfUsers:
                  type: number
                  description: The number of users that live in this town
              required:
                - townName
                - numberOfUsers   
                
  AverageNumberOfFriendsResponse:
    type: object
    required:
      - averageNumberOfFriends
    properties:
      averageNumberOfFriends:
        type: number
  
        
  UserAgesCountResponse:
        type: object
        required:
          - ages
        properties:
          ages:
            type: array
            items:
              type: object
              required:
                - age
                - total
              properties:
                age:
                  type: number
                total:
                  type: number
                  
  UserDeleteRequest:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string  
  
  GeneralResponse:
          type: object
          properties:
            success:
              type: boolean
              description: returns true if successful
            description:
              type: string
              description: a short comment
            data:
              type: object
              description: Additional data returned
          required:
            - success
            - description